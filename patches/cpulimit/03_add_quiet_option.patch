--- a/cpulimit.c
+++ b/cpulimit.c
@@ -51,6 +51,8 @@
 //some useful macro
 #define min(a,b) (a<b?a:b)
 #define max(a,b) (a>b?a:b)
+#define LOG(...) if (!quiet) printf(__VA_ARGS__);
+#define LOG_ERR(...) if (!quiet) fprintf(stderr, __VA_ARGS__);
 
 //pid of the controlled process
 int pid=0;
@@ -58,6 +60,8 @@
 char *program_name;
 //verbose mode
 int verbose=0;
+//quiet mode
+int quiet=0;
 //lazy mode
 int lazy=0;
 //is higher priority nice possible?
@@ -75,7 +79,7 @@
 int waitforpid(int pid) {
 	//switch to low priority
 	if (nice_lim < INT_MAX && setpriority(PRIO_PROCESS,getpid(),19)!=0) {
-		printf("Warning: cannot renice\n");
+		LOG("Warning: cannot renice\n");
 	}
 
 	int i=0;
@@ -101,7 +105,7 @@
 					goto done;
 				}
 				else {
-					fprintf(stderr,"Error: Process %d detected, but you don't have permission to control it\n",pid);
+					LOG_ERR("Error: Process %d detected, but you don't have permission to control it\n",pid);
 				}
 			}
 		}
@@ -115,11 +119,11 @@
 		//no suitable target found
 		if (i++==0) {
 			if (lazy) {
-				fprintf(stderr,"No process found\n");
+				LOG_ERR("No process found\n");
 				exit(2);
 			}
 			else {
-				printf("Warning: no target process found. Waiting for it...\n");
+				LOG("Warning: no target process found. Waiting for it...\n");
 			}
 		}
 
@@ -128,10 +132,10 @@
 	}
 
 done:
-	printf("Process %d detected\n",pid);
+	LOG("Process %d detected\n",pid);
 	//now set high priority, if possible
 	if (nice_lim < INT_MAX && setpriority(PRIO_PROCESS,getpid(),nice_lim)!=0) {
-		printf("Warning: cannot renice.\n");
+		LOG("Warning: cannot renice.\n");
 	}
 	return 0;
 
@@ -147,7 +151,7 @@
 
 	//set low priority
 	if (nice_lim < INT_MAX && setpriority(PRIO_PROCESS,getpid(),19)!=0) {
-		printf("Warning: cannot renice\n");
+		LOG("Warning: cannot renice\n");
 	}
 
 	char exelink[20];
@@ -191,7 +195,7 @@
 							goto done;
 						}
 						else {
-							fprintf(stderr,"Error: Process %d detected, but you don't have permission to control it\n",pid);
+							LOG_ERR("Error: Process %d detected, but you don't have permission to control it\n",pid);
 						}
 					}
 				}
@@ -207,11 +211,11 @@
 		//no suitable target found
 		if (i++==0) {
 			if (lazy) {
-				fprintf(stderr,"No process found\n");
+				LOG_ERR("No process found\n");
 				exit(2);
 			}
 			else {
-				printf("Warning: no target process found. Waiting for it...\n");
+				LOG("Warning: no target process found. Waiting for it...\n");
 			}
 		}
 
@@ -220,10 +224,10 @@
 	}
 
 done:
-	printf("Process %d detected\n",pid);
+	LOG("Process %d detected\n",pid);
 	//now set high priority, if possible
 	if (nice_lim < INT_MAX && setpriority(PRIO_PROCESS,getpid(),nice_lim)!=0) {
-		printf("Warning: cannot renice.\n");
+		LOG("Warning: cannot renice.\n");
 	}
 	return pid;
 
@@ -233,7 +237,7 @@
 void quit(int sig) {
 	//let the process continue if it's stopped
 	kill(pid,SIGCONT);
-	printf("Exiting...\n");
+	LOG("Exiting...\n");
 	exit(0);
 }
 
@@ -344,6 +348,7 @@
 	fprintf(stream, "   OPTIONS\n");
 	fprintf(stream, "      -l, --limit=N      percentage of cpu allowed from 0 to 100 (mandatory)\n");
 	fprintf(stream, "      -v, --verbose      show control statistics\n");
+	fprintf(stream, "      -q, --quiet        work silently\n");
 	fprintf(stream, "      -z, --lazy         exit if there is no suitable target process, or if it dies\n");
 	fprintf(stream, "      -h, --help         display this help and exit\n");
 	exit(exit_code);
@@ -357,7 +362,7 @@
 	//parse arguments
 	int next_option;
 	/* A string listing valid short options letters. */
-	const char* short_options="p:e:P:l:vzh";
+	const char* short_options="p:e:P:l:vqzh";
 	/* An array describing valid long options. */
 	const struct option long_options[] = {
 		{ "pid", required_argument, NULL, 'p' },
@@ -365,6 +370,7 @@
 		{ "path", required_argument, NULL, 'P' },
 		{ "limit", required_argument, NULL, 'l' },
 		{ "verbose", no_argument, NULL, 'v' },
+		{ "quiet", no_argument, NULL, 'q' },
 		{ "lazy", no_argument, NULL, 'z' },
 		{ "help", no_argument, NULL, 'h' },
 		{ NULL, 0, NULL, 0 }
@@ -399,6 +405,11 @@
 				break;
 			case 'v':
 				verbose=1;
+				quiet=0;
+				break;
+			case 'q':
+				verbose=0;
+				quiet=1;
 				break;
 			case 'z':
 				lazy=1;
@@ -454,7 +465,7 @@
 
 			//if we can do better, but not by much, warn about it
 			if( (nice_lim - (20 - (signed)maxlimit.rlim_cur)) < 9) {
-				printf("Warning, can only increase priority by %d.\n", nice_lim - (20 - (signed)maxlimit.rlim_cur));
+				LOG("Warning, can only increase priority by %d.\n", nice_lim - (20 - (signed)maxlimit.rlim_cur));
 			}
 
 			nice_lim = 20 - (signed)maxlimit.rlim_cur; //our new limit
@@ -462,7 +473,7 @@
 		} else //otherwise don't try to change priority. The below will also run if it's not possible for non-root to change priority
 #endif
 		{
-			printf("Warning: cannot renice.\nTo work better you should run this program as root, or adjust RLIMIT_NICE.\nFor example in /etc/security/limits.conf add a line with: * - nice -10\n\n");
+			LOG("Warning: cannot renice.\nTo work better you should run this program as root, or adjust RLIMIT_NICE.\nFor example in /etc/security/limits.conf add a line with: * - nice -10\n\n");
 			nice_lim=INT_MAX;
 		}
 	} else {
@@ -506,7 +517,7 @@
 		//estimate how much the controlled process is using the cpu in its working interval
 		struct cpu_usage cu;
 		if (compute_cpu_usage(pid,workingtime,&cu)==-1) {
-			fprintf(stderr,"Process %d dead!\n",pid);
+			LOG_ERR("Process %d dead!\n",pid);
 			if (lazy) exit(2);
 			//wait until our process appears
 			goto wait_for_process;		
@@ -542,7 +553,7 @@
 		if (limit<1 && limit>0) {
 			//resume process
 			if (kill(pid,SIGCONT)!=0) {
-				fprintf(stderr,"Process %d dead!\n",pid);
+				LOG_ERR("Process %d dead!\n",pid);
 				if (lazy) exit(2);
 				//wait until our process appears
 				goto wait_for_process;
@@ -557,7 +568,7 @@
 		if (limit<1) {
 			//stop process, it has worked enough
 			if (kill(pid,SIGSTOP)!=0) {
-				fprintf(stderr,"Process %d dead!\n",pid);
+				LOG_ERR("Process %d dead!\n",pid);
 				if (lazy) exit(2);
 				//wait until our process appears
 				goto wait_for_process;
