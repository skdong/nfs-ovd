#!/bin/bash
# Copyright (c) 2009 Alon Swartz <alon@turnkeylinux.org> - all rights reserved
# Author Samuel BOVEE <samuel@ulteo.com> 2010

set -e
set -u
${DEBIAN_SCRIPT_DEBUG:+ set -v -x}

. /lib/lsb/init-functions


################ MYSQL #################

MYSQL_ADMIN="/usr/bin/mysqladmin --defaults-file=/etc/mysql/debian.cnf"

mysqld_get_param() {
        /usr/sbin/mysqld --print-defaults \
                | tr " " "\n" \
                | grep -- "--$1" \
                | tail -n 1 \
                | cut -d= -f2
}

mysqld_status () {
    ping_output=`$MYSQL_ADMIN ping 2>&1`; ping_alive=$(( ! $? ))

    ps_alive=0
    pidfile=`mysqld_get_param pid-file`
    if [ -f "$pidfile" ] && ps `cat $pidfile` >/dev/null 2>&1; then ps_alive=1; fi

    if [ "$1" = "check_alive"  -a  $ping_alive = 1 ] ||
       [ "$1" = "check_dead"   -a  $ping_alive = 0  -a  $ps_alive = 0 ]; then
        return 0 # EXIT_SUCCESS
    else
        if [ "$2" = "warn" ]; then
            echo -e "$ps_alive processes alive and '$MYSQL_ADMIN ping' resulted in\n$ping_output\n" | \
            logger -p daemon.err -t /etc/init.d/mysql -i -p daemon.debug
        fi
        return 1 # EXIT_FAILURE
    fi
}

start_mysql()
{
    test -x /usr/sbin/mysqld || exit 0

    log_daemon_msg "Starting MySQL database server" "mysqld"
    if mysqld_status check_alive nowarn; then
       log_progress_msg "already running"
       log_end_msg 0
    else
        /usr/bin/mysqld_safe > /dev/null 2>&1 &
        # 6s was reported in #352070 to be too few when using ndbcluster
        for i in {1..14}; do
            sleep 1
            mysqld_status check_alive nowarn && break
            log_progress_msg "."
        done
        if mysqld_status check_alive warn; then
            log_end_msg 0
            # Now start mysqlcheck or whatever the admin wants.
            /etc/mysql/debian-start > /dev/null
        else
            log_end_msg 1
            log_failure_msg "Please take a look at the syslog"
        fi
    fi
}

stop_mysql()
{
        # * As a passwordless mysqladmin (e.g. via ~/.my.cnf) must be possible
        # at least for cron, we can rely on it here, too. (although we have
        # to specify it explicit as e.g. sudo environments points to the normal
        # users home and not /root)
        log_daemon_msg "Stopping MySQL database server" "mysqld"
        if ! mysqld_status check_dead nowarn; then
          set +e
          shutdown_out=`$MYSQL_ADMIN shutdown 2>&1`; r=$?
          set -e
          if [ "$r" -ne 0 ]; then
            log_end_msg 1
            [ "$VERBOSE" != "no" ] && log_failure_msg "Error: $shutdown_out"
            log_daemon_msg "Killing MySQL database server by signal" "mysqld"
            killall -15 mysqld
            server_down=
            for i in 1 2 3 4 5 6 7 8 9 10; do
              sleep 1
              if mysqld_status check_dead nowarn; then server_down=1; break; fi
            done
          if test -z "$server_down"; then killall -9 mysqld; fi
          fi
        fi
}

restart_mysql()
{
	stop_mysql
	start_mysql
}

################ SMBD #################

SMBD_PIDDIR=/var/run/samba
SMBD_PID=$SMBD_PIDDIR/smbd.pid

start_smbd()
{
    log_daemon_msg "Starting Samba daemon"
    install -o root -g root -m 755 -d $SMBD_PIDDIR
    log_progress_msg "smbd"
    if ! start-stop-daemon --start --quiet --oknodo --exec /usr/sbin/smbd -- -D; then
        log_end_msg 1
        exit 1
    fi
    log_end_msg 0
}

stop_smbd()
{
    log_daemon_msg "Stopping Samba daemon"
    log_progress_msg "smbd"
    if [ ! -f  "$SMBD_PID" ]; then
        log_warning_msg "NOT RUNNING"
        log_end_msg 0
        return;
    fi
    start-stop-daemon --stop --quiet --pidfile $SMBD_PID
    sleep 1
    [ -f $SMBD_PID ] && ! ps h `cat $SMBD_PID` > /dev/null && rm -f $SMBD_PID
    log_end_msg 0
}

restart_smbd()
{
    stop_smbd
    sleep 1
    start_smbd
}


#######################################

fn=$(basename $0)_$1
if type -t $fn >/dev/null; then
    $fn
else
    exit 0
fi
